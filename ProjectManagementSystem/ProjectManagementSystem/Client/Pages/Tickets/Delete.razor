@page "/tickets/delete/{Id:guid}"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Are you sure you want to delete this ticket?</h3>

<hr />

<h4>Ticket Name</h4>
<p>
    @Ticket.Name
</p>

<h4>Related Project</h4>
<p>
    @Project.Name
</p>

<h4>Ticket Start Date</h4>
<p>
    @Ticket.StartDate
</p>

<button class="btn btn-secondary" @onclick='Return'>
    Return
</button>
<button class="btn btn-danger" @onclick="DeleteProject">
    Delete
</button>


@code {
    [Parameter] public Guid Id { get; set; }
    private Ticket Ticket { get; set; } = new Ticket();
    private Project Project { get; set; } = new Project();
    private List<UserTicket> UserTickets { get; set; } = new List<UserTicket>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Ticket = await Http.GetFromJsonAsync<Ticket>($"/api/Tickets/{Id}");
            Project = await Http.GetFromJsonAsync<Project>($"/api/Projects/{Ticket.ProjectId}");
            UserTickets = await Http.GetFromJsonAsync<List<UserTicket>>("api/UserTickets");

            Ticket.UserTickets = new List<UserTicket>();

            //Retrieve all userticket links related to this ticket
            foreach (var userTicket in UserTickets)
            {
                if (userTicket.TicketId == Ticket.Id)
                {
                    Ticket.UserTickets.Add(userTicket);
                }
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void DeleteProject()
    {

        try
        {

            //delete usertickets related to ticket
            foreach (var userTicket in Ticket.UserTickets)
            {
                var responseUserTicket = await Http.DeleteAsync($"/api/UserTickets/{userTicket.Id}");
                responseUserTicket.EnsureSuccessStatusCode();
            }

            //delete ticket
            var responseTicket = await Http.DeleteAsync($"/api/Tickets/{Id}");
            responseTicket.EnsureSuccessStatusCode();

            Navigation.NavigateTo("/tickets");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void Return()
    {
        Navigation.NavigateTo("/tickets");
    }
}