@page "/tickets/create"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Create a Ticket</h3>

<hr />

<EditForm Model="Ticket" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div>
        <label class="control-label">Ticket Name</label>
        <InputText @bind-Value="Ticket.Name" class="form-control" />
        <ValidationMessage For="@(() => Ticket.Name)" />
    </div>

    <br />


    <div>
        <label class="control-label">Ticket Description</label>
        <InputTextArea @bind-Value="Ticket.Description" class="form-control" />
        <ValidationMessage For="@(() => Ticket.Description)" />
    </div>

    <br />


    <div>
        <label class="control-label">Ticket Deadline</label>
        <InputDate @bind-Value="Ticket.Deadline" class="form-control" />
        <ValidationMessage For="@(() => Ticket.Deadline)" />
    </div>

    <br />

    <div>
        <label class="control-label">Related Project</label>
        <InputSelect @bind-Value="Ticket.ProjectId" class="form-control">
            <option selected @bind="IsDisabled" hidden label="-- select an option --"></option>
            @foreach (var project in Projects)
            {
                <option label="@project.Name">@project.Id</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Ticket.ProjectId)" />
    </div>

    <br />

    <div>
        <label class="control-label">Assigned Users</label>
        @foreach (var user in Users)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="flexCheckDefault" @onclick="(()=>handleCheckboxClick(user))">
                <label class="form-check-label" for="flexCheckDefault">@user.FirstName @user.LastName</label>
            </div>
        }
    </div>

    <br />

    <button class="btn btn-secondary" @onclick='Return'>
        Return
    </button>
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Create
    </button>

</EditForm>


@code {

    private Ticket Ticket { get; set; } = new Ticket();
    private List<Project> Projects { get; set; } = new List<Project>();
    private List<User> Users { get; set; } = new List<User>();
    private List<User> AssignedUsers { get; set; } = new List<User>();

    protected override async Task OnInitializedAsync()
    {

        Ticket.StartDate = DateTime.Now;
        Ticket.State = "Opened";

        try
        {
            Projects = await Http.GetFromJsonAsync<List<Project>>("/api/Projects");
            Users = await Http.GetFromJsonAsync<List<User>>("/api/Users");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/Tickets", Ticket);
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();
            var ticket = JsonConvert.DeserializeObject<Ticket>(content);
            Navigation.NavigateTo($"tickets/read/{ticket.Id}");

            if (AssignedUsers.Count > 0)
            {
                foreach (var user in AssignedUsers)
                {
                    var r = await Http.PostAsJsonAsync("/api/UserTickets", new UserTicket() { TicketId = ticket.Id, UserId = user.Id });
                    r.EnsureSuccessStatusCode();
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void handleCheckboxClick(User user)
    {
        if(AssignedUsers.Contains(user))
        {
            AssignedUsers.Remove(user);
        }
        else
        {
            AssignedUsers.Add(user);
        }
    }

    private void Return()
    {
        Navigation.NavigateTo("/tickets");
    }

}