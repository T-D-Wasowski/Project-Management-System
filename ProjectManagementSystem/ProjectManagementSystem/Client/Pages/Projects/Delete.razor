@page "/projects/delete/{Id:guid}"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Are you sure you want to delete this project?</h3>

<hr />

<h4>Project Name</h4>
<p>
    @Project.Name
</p>

<h4>Issuing Company</h4>
<p>
    @Company.Name
</p>

<h4>Project Start Date</h4>
<p>
    @Project.StartDate
</p>

<h4>Assigned Tickets (Will also be deleted!)</h4>
<ul>
    @if (Project.Tickets != null)
    {
        @foreach (var ticket in Project.Tickets)
        {
            <li>
                @ticket.Name
            </li>
        }
    }
</ul>

<button class="btn btn-secondary" @onclick='Return'>
    Return
</button>
<button class="btn btn-danger" @onclick="DeleteProject">
    Delete
</button>


@code {
    [Parameter] public Guid Id { get; set; }
    private Project Project { get; set; } = new Project();
    private Company Company { get; set; } = new Company();
    private List<Ticket> Tickets { get; set; } = new List<Ticket>();
    private List<UserTicket> UserTickets { get; set; } = new List<UserTicket>();
    private List<ProjectUser> ProjectUsers { get; set; } = new List<ProjectUser>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Project = await Http.GetFromJsonAsync<Project>($"/api/Projects/{Id}");
            Company = await Http.GetFromJsonAsync<Company>($"/api/Companies/{Project.CompanyId}");
            Tickets = await Http.GetFromJsonAsync<List<Ticket>>("api/Tickets");
            UserTickets = await Http.GetFromJsonAsync<List<UserTicket>>("api/UserTickets");
            ProjectUsers = await Http.GetFromJsonAsync<List<ProjectUser>>("/api/ProjectUsers");

            Project.Tickets = new List<Ticket>();
            Project.ProjectUsers = new List<ProjectUser>();

            //retrieve each ticket related to the project
            foreach (var ticket in Tickets)
            {
                if (ticket.ProjectId == Project.Id)
                {
                    Project.Tickets.Add(ticket);
                }
            }

            //Retrieve all userticket links for each ticket related to the project
            foreach (var ticket in Project.Tickets)
            {
                ticket.UserTickets = new List<UserTicket>();

                foreach (var userTicket in UserTickets)
                {
                    if (userTicket.TicketId == ticket.Id)
                    {
                        ticket.UserTickets.Add(userTicket);
                    }
                }
            }

            //Retrieve each userProject related to this project
            foreach (var projectUser in ProjectUsers)
            {
                if (projectUser.ProjectId == Project.Id)
                {
                    Project.ProjectUsers.Add(projectUser);
                }
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void DeleteProject()
    {

        try
        {

            //delete ticket before deleting project
            foreach (var ticket in Project.Tickets)
            {

                //delete ticket assignments before deleting ticket
                foreach (var userTicket in ticket.UserTickets)
                {
                    var responseUserTicket = await Http.DeleteAsync($"/api/UserTickets/{userTicket.Id}");
                    responseUserTicket.EnsureSuccessStatusCode();
                }

                var responseTicket = await Http.DeleteAsync($"/api/Tickets/{ticket.Id}");
                responseTicket.EnsureSuccessStatusCode();
            }

            //delete user assignments before deleting project
            foreach (var projectUser in Project.ProjectUsers)
            {
                var responseProjectUser = await Http.DeleteAsync($"/api/ProjectUsers/{projectUser.Id}");
                responseProjectUser.EnsureSuccessStatusCode();
            }

            //delete project
            var responseProject = await Http.DeleteAsync($"/api/Projects/{Id}");
            responseProject.EnsureSuccessStatusCode();

            Navigation.NavigateTo("/projects");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void Return()
    {
        Navigation.NavigateTo("/projects");
    }
}