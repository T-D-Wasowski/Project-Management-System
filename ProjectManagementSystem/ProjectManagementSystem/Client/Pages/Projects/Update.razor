@page "/projects/update/{Id:guid}"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit a Project</h3>

<hr />

<EditForm Model="Project" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div>
        <label class="control-label">Project Name</label>
        <InputText @bind-Value="Project.Name" class="form-control" />
        <ValidationMessage For="@(() => Project.Name)" />
    </div>

    <br />

    <div>
        <label class="control-label">Project Completion Date</label>
        <InputDate @bind-Value="Project.EndDate" class="form-control" />
        <ValidationMessage For="@(() => Project.EndDate)" />
    </div>

    <br />

    <div>
        <label class="control-label">Project Deadline</label>
        <InputDate @bind-Value="Project.Deadline" class="form-control" />
        <ValidationMessage For="@(() => Project.Deadline)" />
    </div>

    <br />

    <label class="control-label">Issuing Company</label>
    <InputSelect @bind-Value="Project.CompanyId" class="form-control">
        @foreach (var company in Companies)
        {
            <option label="@company.Name">@company.Id</option>
        }
    </InputSelect>
    <ValidationMessage For="@(() => Project.CompanyId)" />

    <p>
        @Project.CompanyId
    </p>

    <div>
        <label class="control-label">Assigned Users</label>
        @foreach (var user in Users)
        {
            <div class="form-check">
                @if (AssignedUsers.Contains(user))
                {
                    <input class="form-check-input" type="checkbox" id="flexCheckDefault" @onclick="(()=>handleCheckboxClick(user))" checked>
                } else {
                    <input class="form-check-input" type="checkbox" id="flexCheckDefault" @onclick="(()=>handleCheckboxClick(user))">
                }
                <label class="form-check-label" for="flexCheckDefault">@user.FirstName @user.LastName</label>
            </div>
        }
    </div>

    <br />

    <button class="btn btn-secondary" @onclick='Return'>
        Return
    </button>
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Update
    </button>

</EditForm>

@code {

    [Parameter] public Guid Id { get; set; }
    private Project Project { get; set; } = new Project();
    private List<Company> Companies { get; set; } = new List<Company>();
    private List<User> Users { get; set; } = new List<User>();
    private List<User> AssignedUsers { get; set; } = new List<User>();
    private List<ProjectUser> ProjectUsers { get; set; } = new List<ProjectUser>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Project = await Http.GetFromJsonAsync<Project>($"/api/Projects/{Id}");
            Companies = await Http.GetFromJsonAsync<List<Company>>("/api/Companies");
            Users = await Http.GetFromJsonAsync<List<User>>("/api/Users");
            ProjectUsers = await Http.GetFromJsonAsync<List<ProjectUser>>("/api/ProjectUsers");

            Project.ProjectUsers = new List<ProjectUser>();

            //Retrieve linked UserTickets
            foreach (var projectUser in ProjectUsers)
            {
                if (projectUser.ProjectId == Project.Id)
                {
                    Project.ProjectUsers.Add(projectUser);
                }
            }

            //Retrieve linked Users
            foreach (var projectUser in Project.ProjectUsers)
            {
                AssignedUsers.Add(Users.Find(user => user.Id == projectUser.UserId));
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/Projects/{Project.Id}", Project);
            response.EnsureSuccessStatusCode();

            //remove old assignments
            foreach (var projectUser in Project.ProjectUsers)
            {
                if (AssignedUsers.Contains(Users.Find(user => user.Id == projectUser.UserId)))
                {
                    continue;
                }
                else
                {
                    var responseProjectUserDelete = await Http.DeleteAsync($"/api/ProjectUsers/{projectUser.Id}");
                    responseProjectUserDelete.EnsureSuccessStatusCode();
                }
            }

            //add new assignments
            foreach (var user in AssignedUsers)
            {
                if (Project.ProjectUsers.Contains(ProjectUsers.Find(projectUser => projectUser.UserId == user.Id & projectUser.ProjectId == Project.Id)))
                {
                    continue;
                }
                else
                {
                    var responseProjectUserAdd = await Http.PostAsJsonAsync("/api/ProjectUsers", new ProjectUser() { ProjectId = Project.Id, UserId = user.Id });
                    responseProjectUserAdd.EnsureSuccessStatusCode();
                }

            }

            Navigation.NavigateTo($"projects/read/{Project.Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void handleCheckboxClick(User user)
    {
        if (AssignedUsers.Contains(user))
        {
            AssignedUsers.Remove(user);
        }
        else
        {
            AssignedUsers.Add(user);
        }
    }

    private void Return()
    {
        Navigation.NavigateTo("/projects");
    }

}