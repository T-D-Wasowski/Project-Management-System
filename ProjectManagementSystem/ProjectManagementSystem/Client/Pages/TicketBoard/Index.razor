@page "/ticketboard"

@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>All Your Tickets @User.FirstName</h3>

<hr />

<div class="table-responsive">

    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Ticket Name</th>
                <th>Ticket State</th>
                <th>Ticket Deadline</th>
                <th>Related Project</th>
                <th>View Details</th>
                <th>Change State</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in AssignedTickets)
            {
                <tr class="@rowColour(ticket)">
                    <td>
                        @ticket.Name
                    </td>
                    <td>
                        @ticket.State
                    </td>
                    <td>
                        @ticket.Deadline?.ToString("dd/MM/yyyy")
                    </td>
                    <td>
                        @Projects.Find(project => project.Id == ticket.ProjectId).Name
                    </td>
                    <td>
                        <a href="/ticketboard/read/@ticket.Id">View</a>
                    </td>
                    <td>
                        <a href="/ticketboard/update/@ticket.Id">Update</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {

    private User User { get; set; } = new User();
    private List<User> Users { get; set; } = new List<User>();
    private List<Ticket> Tickets { get; set; } = new List<Ticket>();
    private List<Ticket> AssignedTickets { get; set; } = new List<Ticket>();
    private List<UserTicket> UserTickets { get; set; } = new List<UserTicket>();
    private List<Project> Projects { get; set; } = new List<Project>();
    private List<string> States { get; set; } = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Tickets = await Http.GetFromJsonAsync<List<Ticket>>("/api/Tickets");
            Projects = await Http.GetFromJsonAsync<List<Project>>("/api/Projects");
            Users = await Http.GetFromJsonAsync<List<User>>("/api/Users");
            UserTickets = await Http.GetFromJsonAsync<List<UserTicket>>("/api/UserTickets");

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            User = Users.Find(user => user.Email == authState.User.Identity.Name);

            foreach (var userTicket in UserTickets)
            {
                if (userTicket.UserId == User.Id)
                {
                    AssignedTickets.Add(Tickets.Find(ticket => ticket.Id == userTicket.TicketId));
                }
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private string rowColour(Ticket ticket)
    {
        if(ticket.Deadline != null)
        {
            if (ticket.State == "Completed")
            {
                return "table-success"; //green
            }
            else if (DateTime.Now > ticket.Deadline)
            {
                return "table-danger"; //red
            }
            else if (ticket.Deadline?.Subtract(DateTime.Now).TotalDays < 7)
            {
                return "table-warning"; //yellow
            }
        }
        return "";
    }

}