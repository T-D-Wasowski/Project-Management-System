@page "/ticketboard/update/{Id:guid}"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Update Ticket State</h3>

<hr />

<EditForm Model="Ticket" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <label class="control-label">Related Project</label>
    <InputSelect @bind-Value="Ticket.State" class="form-control">
        <option>Opened</option>
        <option>In Progress</option>
        <option>Delayed</option>
        <option>Completed</option>
    </InputSelect>
    <ValidationMessage For="@(() => Ticket.State)" />

    @if (Ticket.State == "Completed")
    {
        <br />

        <div>
            <label class="control-label">Ticket Completion Date</label>
            <InputDate @bind-Value="Ticket.EndDate" class="form-control" />
            <ValidationMessage For="@(() => Ticket.EndDate)" />
        </div>
    }
    else if (Ticket.State == "Delayed")
    {
        <br />

        <div>
            <label class="control-label">Ticket Deadline</label>
            <InputDate @bind-Value="Ticket.Deadline" class="form-control" />
            <ValidationMessage For="@(() => Ticket.Deadline)" />
        </div>
    }

    <br />

    <button class="btn btn-secondary" @onclick='Return'>
        Return
    </button>
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Update
    </button>

</EditForm>

@code {

    [Parameter] public Guid Id { get; set; }
    private Ticket Ticket { get; set; } = new Ticket();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Ticket = await Http.GetFromJsonAsync<Ticket>($"/api/Tickets/{Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            if (Ticket.State != "Completed")
            {
                Ticket.EndDate = null;
            }

            if (Ticket.Deadline != null)
            {
                if (DateTime.Now > Ticket.Deadline)
                {
                    Ticket.State = "Overdue";
                }
            }

            var response = await Http.PutAsJsonAsync($"/api/Tickets/{Ticket.Id}", Ticket);
            response.EnsureSuccessStatusCode();

            Navigation.NavigateTo($"ticketboard/read/{Ticket.Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void Return()
    {
        Navigation.NavigateTo("/ticketboard");
    }

}