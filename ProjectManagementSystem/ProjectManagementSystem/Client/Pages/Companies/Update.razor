@page "/companies/update/{Id:guid}"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit a Company</h3>

<hr />

<EditForm Model="Company" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div>
        <label class="control-label">Company Name</label>
        <InputText @bind-Value="Company.Name" class="form-control" />
        <ValidationMessage For="@(() => Company.Name)" />
    </div>

    <br />

    <div>
        <label class="control-label">Company Address</label>
        <InputText @bind-Value="Company.Address" class="form-control" />
        <ValidationMessage For="@(() => Company.Address)" />
    </div>

    <br />

    <div>
        <label class="control-label">Company Phone</label>
        <InputText @bind-Value="Company.Phone" class="form-control" />
        <ValidationMessage For="@(() => Company.Phone)" />
    </div>

    <br />

    <div>
        <label class="control-label">Company Email</label>
        <InputText @bind-Value="Company.Email" class="form-control" />
        <ValidationMessage For="@(() => Company.Email)" />
    </div>

    <br />

    <button class="btn btn-secondary" @onclick='Return'>
        Return
    </button>
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Update
    </button>

</EditForm>

@code {

    [Parameter] public Guid Id { get; set; }
    private Company Company { get; set; } = new Company();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Company = await Http.GetFromJsonAsync<Company>($"/api/Companies/{Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/Companies/{Company.Id}", Company);
            response.EnsureSuccessStatusCode();

            Navigation.NavigateTo($"companies/read/{Company.Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void Return()
    {
        Navigation.NavigateTo("/companies");
    }

}




