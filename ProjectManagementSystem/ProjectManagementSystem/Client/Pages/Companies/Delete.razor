@page "/companies/delete/{Id:guid}"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Are you sure you want to delete this company?</h3>

<hr />

<h4>Company Name</h4>
<p>
    @Company.Name
</p>

<h4>Company Email</h4>
<p>
    @Company.Email
</p>

<h4>Company Registration Date</h4>
<p>
    @Company.RegistrationDate
</p>

<h4>Assigned Projects (Will also be deleted!)</h4>
<ul>
    @if (Company.Projects != null)
    {
        @foreach (var project in Company.Projects)
        {
            <li>
                @project.Name
            </li>
        }
    }
</ul>

<button class="btn btn-secondary" @onclick='Return'>
    Return
</button>
<button class="btn btn-danger" @onclick="DeleteCompany">
    Delete
</button>


@code {
    [Parameter] public Guid Id { get; set; }
    private Company Company { get; set; } = new Company();
    private List<Project> Projects { get; set; } = new List<Project>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Company = await Http.GetFromJsonAsync<Company>($"/api/Companies/{Id}");
            Projects = await Http.GetFromJsonAsync<List<Project>>("/api/Projects");

            Company.Projects = new List<Project>();

            foreach (var project in Projects)
            {
                if (project.CompanyId == Company.Id)
                {
                    Company.Projects.Add(project);
                }
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void DeleteCompany()
    {

        try
        {

            foreach (var project in Company.Projects)
            {
                var r = await Http.DeleteAsync($"/api/Projects/{project.Id}");
                r.EnsureSuccessStatusCode();
            }

            var response = await Http.DeleteAsync($"/api/Companies/{Id}");
            response.EnsureSuccessStatusCode();

            Navigation.NavigateTo("/companies");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void Return()
    {
        Navigation.NavigateTo("/companies");
    }
}
