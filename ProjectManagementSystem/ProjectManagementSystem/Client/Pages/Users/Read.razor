@page "/users/read/{Id:guid}"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>User Details</h3>

<hr />

<h4>User First Name</h4>
<p>
    @User.FirstName
</p>

<h4>User Last Name</h4>
<p>
    @User.LastName
</p>

<h4>User Age</h4>
<p>
    @User.Age
</p>

<h4>User Email</h4>
<p>
    @User.Email
</p>

<h4>User Phone</h4>
<p>
    @User.Phone
</p>

<h4>User Address</h4>
<p>
    @User.Address
</p>

<h4>User Registration Date</h4>
<p>
    @User.RegistrationDate
</p>

<h4>Assigned Projects</h4>
<ul>
    @if (AssignedProjects != null)
    {
        @foreach (var project in AssignedProjects)
        {
            <li>
                @project.Name
            </li>
        }
    }
</ul>

<h4>Assigned Tickets</h4>
<ul>
    @if (AssignedTickets != null)
    {
        @foreach (var ticket in AssignedTickets)
        {
            <li>
                @ticket.Name
            </li>
        }
    }
</ul>


<div>
    <button class="btn btn-secondary" @onclick='() => Navigate("return")'>
        Return
    </button>
    <button value="edit" class="btn btn-primary" @onclick='() => Navigate("edit")'>
        Edit
    </button>
</div>

@code {

    [Parameter] public Guid Id { get; set; }
    private User User { get; set; } = new User();
    private Company Company { get; set; } = new Company();
    private List<Ticket> Tickets { get; set; } = new List<Ticket>();
    private List<Ticket> AssignedTickets { get; set; } = new List<Ticket>();
    private List<UserTicket> UserTickets { get; set; } = new List<UserTicket>();
    private List<Project> Projects { get; set; } = new List<Project>();
    private List<Project> AssignedProjects { get; set; } = new List<Project>();
    private List<ProjectUser> ProjectUsers { get; set; } = new List<ProjectUser>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            User = await Http.GetFromJsonAsync<User>($"/api/Users/{Id}");
            Tickets = await Http.GetFromJsonAsync<List<Ticket>>("/api/Tickets");
            Projects = await Http.GetFromJsonAsync<List<Project>>("/api/Projects");
            ProjectUsers = await Http.GetFromJsonAsync<List<ProjectUser>>("/api/ProjectUsers");
            UserTickets = await Http.GetFromJsonAsync<List<UserTicket>>("/api/UserTickets");

            //get AssignedTickets
            foreach (var userTicket in UserTickets)
            {
                if (userTicket.UserId == User.Id)
                {
                    AssignedTickets.Add(Tickets.Find(ticket => ticket.Id == userTicket.TicketId));
                }
            }

            //get projectUsers
            foreach (var projectUser in ProjectUsers)
            {
                if (projectUser.UserId == User.Id)
                {
                    AssignedProjects.Add(Projects.Find(project => project.Id == projectUser.ProjectId));
                }
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void Navigate(string buttonId)
    {
        switch (buttonId)
        {
            case "edit":
                Navigation.NavigateTo($"users/update/{User.Id}");
                break;
            default:
                Navigation.NavigateTo("/users");
                break;
        }
    }
}